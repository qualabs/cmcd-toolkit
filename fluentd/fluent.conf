# ==============================================================================
# INPUT: Receive logs from Docker containers via the fluentd logging driver
# ==============================================================================
<source>
    @type forward
    port 24224
    bind 0.0.0.0
</source>

# ==============================================================================
# FILTER: Parse application logs sent by Docker
#
# Docker's fluentd logging driver wraps the application's actual log line
# (stdout/stderr) into a field, typically named 'log'.
# We assume your 'collector' (and 'player') application outputs JSON strings.
#
# The tag from Docker will be based on your docker-compose.yml logging options.
# If you use `tag: "docker.{{.Name}}"`, and your service is named 'collector',
# the tag will be 'docker.collector'. The `.**` catches specific container instances.
# ==============================================================================

<filter docker.collector.**> 
    @type parser
    key_name log
    remove_key_name_field true
    emit_invalid_record_to_error false
    <parse>
        @type json
    </parse>
</filter>

# ==============================================================================
# MATCH: Send parsed logs from 'collector' (and 'player') to InfluxDB
# ==============================================================================
# This matches logs that have passed through the filters above.
<match docker.collector.**>
    @type influxdb
    host "#{ENV['INFLUXDB_HOST'] || 'influxdb'}"  # Default to 'influxdb' if ENV var not set
    port "#{ENV['INFLUXDB_PORT'] || 8086}"        # Default to 8086
    dbname "#{ENV['INFLUXDB_DB']}"                # Database name
    user "#{ENV['INFLUXDB_USER'] || nil}"         # Set to nil or empty if no auth
    password "#{ENV['INFLUXDB_PASSWORD'] || nil}" # Set to nil or empty if no auth, use_ssl false

    measurement "#{ENV['INFLUXDB_MEASUREMENT'] || 'application_logs'}" # Target measurement name
    time_precision s
    tag_keys ["user-agent", "request_ip", "cmcd_mode", "sid"]

    <buffer>
        flush_interval 10s
    </buffer>
</match>